import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class MaxAreaTest {

    @Test
    void maxArea_positiveTest() {
        Assertions.assertEquals(MaxArea.maxArea(new int[]{1, 8, 6, 2, 5, 4, 8, 3, 7}), 49);
        Assertions.assertEquals(MaxArea.maxArea(new int[]{11, 8, 6, 2, 5, 4, 8, 3, 7}), 56);
        Assertions.assertEquals(MaxArea.maxArea(new int[]{1,1}), 1);
        Assertions.assertEquals(MaxArea.maxArea(new int[]{111,1,1}), 2);
        Assertions.assertEquals(MaxArea.maxArea(new int[]{111,1}), 1);
        Assertions.assertEquals(MaxArea.maxArea(new int[]{1120,6755,7122,5637,273,8580,3697,2312,
                266898898,2500,2607,8710,8646,488,8269,7911,1187,4757,8153,333,7,9126,5586,4584,3931,
                4537,7301,8664,2557,662,3425,4136,9826,290,4559,1453,3396,5372,4312,5631,1146,6950,
                3827,5532,8460,6945,9120,9441,7048,5847,2503,723,9113,5080,1168,5001,2335,5006,3092,
                9028,1861,1246,9801,2362,701,9445,4383,8227,1801,5333,6376,6996,6835,4737,5763,2728,
                8458,8403,7208,1605,3214,5510,5926,841,9488,701,6309,8139,6710,4182,1466,5495,3550,5624,
                1079,1402,2523,4441,9559,2457,9216,6351,6211,9838,1898,2143,6571,9291,7837,9586,5222,
                3618,9139,6714,1289,8164,2827,1951,2765,8201,8185,583,9267,9353,5945,3046,5260,8540,
                6167,1333,939,7125,6878,2210,167,6554,3825,337,6830,9597,3792,6733,2054,1533,2315,9721,
                3866,4429,7543,1392,6025,8557,2330,3069,2473,5489,9182,8326,6087,3024,7582,8052,3111,
                3825,2627,4596,3570,5634,7080,428,3940,1617,6584,3448,204,7335,1777,567,5088,63,9172,
                8881,6033,9249,8678,6938,5177,3594,529,5476,9120,8177,3049,1844,2195,3028,6668,1133,
                3428,202,2373,5481,4266,3464,66666, 290,4559,1453,3396,5372,4312,5631,1146,6950,
                3827,5532,8460,6945,9120,9441,7048,5847,2503,723,9113,5080,1168,5001,2335,5006,3092,
                9028,1861,1246,9801,2362,701,9445,4383,8227,1801,5333,6376,6996,6835,4737,5763,2728,
                8458,8403,7208,1605,3214,5510,5926,841,9488,701,6309,8139,6710,4182,1466,5495,3550,5624,
                1079,1402,2523,4441,9559,2457,9216,6351,6211,9838,1898,2143,6571,9291,7837,9586,5222,
                3618,9139,6714,1289,8164,2827,1951,2765,8201,8185,583,9267,9353,5945,3046,5260,8540,
                6167,1333,939,7125,6878,2210,167,6554,3825,337,6830,9597,3792,6733,2054,1533,2315,9721,
                3866,4429,7543,1392,6025,8557,2330,3069,2473,5489,9182,8326,6087,3024,7582,8052,3111,
                3825,2627,4596,3570,5634,7080,428,3940,1617,6584,3448,204,7335,1777,567,5088,63,9172,
                8881,6033,9249,8678,6938,5177,3594,529,5476,9120,8177,3049,1844,2195,3028,6668,1133,
                3428,202,2373,5481,4266, 9120,9441,7048,5847,2503,723,9113,5080,1168,5001,2335,5006,3092,
                9028,1861,1246,9801,2362,701,9445,4383,8227,1801,5333,6376,6996,6835,4737,5763,2728,
                8458,8403,7208,1605,3214,5510,5926,841,9488,701,6309,8139,6710,4182,1466,5495,3550,5624,
                1079,1402,2523,4441,9559,2457,9216,6351,6211,9838,1898,2143,6571,9291,7837,9586,5222,
                3618,9139,6714,1289,8164,2827,1951,2765,8201,8185,583,9267,9353,5945,3046,5260,8540,
                6167,1333,939,7125,6878,2210,167,6554,3825,337,6830,9597,3792,6733,2054,1533,2315,9721,
                3866,4429,7543,1392,6025,8557,2330,3069,2473,5489,9182,8326,6087,3024,7582,8052,3111,
                3825,2627,4596,3570,5634,7080,428,3940,1617,6584,3448,204,7335,1777,567,5088,63,9172,
                8881,6033,9249,8678,6938,5177,3594,529,5476,9120,8177,3049,1844,2195,3028,6668,1133,
                3428,202,2373,5481,4266,3464,66666, 290,4559,1453,3396,5372,4312,5631,1146,6950,
                3827,5532,8460,6945,9120,9441,7048,5847,2503,723,9113,5080,1168,5001,2335,5006,3092,
                9028,1861,1246,9801,2362,701,9445,4383,8227,1801,5333,6376,6996,6835,4737,5763,2728,
                8458,8403,7208,1605,3214,5510,5926,841,9488,701,6309,8139,6710,4182,1466,5495,3550,5624,
                1079,1402,2523,4441,9559,2457,9216,6351,6211,9838,1898,2143,6571,9291,7837,9586,5222,
                3618,9139,6714,1289,8164,2827,1951,2765,8201,8185,583,9267,9353,5945,3046,5260,8540,
                6167,1333,939,7125,6878,2210,167,6554,3825,337,6830,9597,3792,6733,2054,1533,2315,9721,
                3866,4429,7543,1392,6025,8557,2330,3069,2473,5489,9182,8326,6087,3024,7582,8052,3111,
                3825,2627,4596,3570,5634,7080,428,3940,1617,6584,3448,204,7335,1777,567,5088,63,9172,
                8881,6033,9249,8678,6938,5177,3594,529,5476,9120,8177,3049,1844,2195,3028,6668,1133,
                3428,202,2373,5481,4266, 3827,5532,8460,6945,9120,9441,7048,5847,2503,723,9113,5080,
                1168,5001,2335,5006,3092, 9028,1861,1246,9801,2362,701,9445,4383,8227,1801,5333,6376,
                6996,6835,4737,5763,2728, 8458,8403,7208,1605,3214,5510,5926,841,9488,701,6309,8139,6710,
                4182,1466,5495,3550,5624, 1079,1402,2523,4441,9559,2457,9216,6351,6211,9838,1898,2143,
                6571,9291,7837,9586,5222, 3618,9139,6714,1289,8164,2827,1951,2765,8201,8185,583,9267,9353,
                5945,3046,5260,8540, 6167,1333,939,7125,6878,2210,167,6554,3825,337,6830,9597,3792,6733,
                2054,1533,2315,9721, 3866,4429,7543,1392,6025,8557,2330,3069,2473,5489,9182,8326,6087,
                3024,7582,8052,3111, 3825,2627,4596,3570,5634,7080,428,3940,1617,6584,3448,204,731777567,
                5088639, 8881,6033,9249,8678,6938,5177,3594,529,5476,9120,8177,3049,1844,2195,3028,6668,1133,
                3428,202,2373,5481,4266,3464,66666, 290,4559,1453,3396,5372,4312,5631,1146,6950,
                3827,5532,8460,6945,9120,9441,7048,5847,2503,723,9113,5080,1168,5001,2335,5006,3092,
                9028,1861,1246,9801,2362,701,9445,4383,8227,1801,5333,6376,6996,6835,4737,5763,2728,
                8458,8403,7208,1605,3214,5510,5926,841,9488,701,6309,8139,6710,4182,1466,5495,3550,5624,
                1079,1402,2523,4441,9559,2457,9216,6351,6211,9838,1898,2143,6571,9291,7837,9586,5222,
                3618,9139,6714,1289,8164,2827,1951,2765,8201,8185,583,9267,9353,5945,3046,5260,8540,
                6167,1333,939,7125,6878,2210,167,6554,3825,337,6830,9597,3792,6733,2054,1533,2315,9721,
                3866,4429,7543,1392,6025,8557,2330,3069,2473,5489,9182,8326,6087,3024,7582,8052,3111,
                3825,2627,4596,3570,5634,7080,428,3940,1617,6584,3448,204,7335,1777,567,5088,63,9172,
                8881,6033,9249,8678,6938,5177,3594,529,5476,9120,8177,3049,1844,2195,3028,6668,1133,
                3428,202,2373,5481,4266, 9120,9441,7048,5847,2503,723,9113,5080,1168,5001,2335,5006,3092,
                9028,1861,1246,9801,2362,701,9445,4383,8227,1801,5333,6376,6996,6835,4737,5763,2728,
                8458,8403,7208,1605,3214,5510,5926,841,9488,701,6309,8139,6710,4182,1466,5495,3550,5624,
                1079,1402,2523,4441,9559,2457,9216,6351,6211,9838,1898,2143,6571,9291,7837,9586,5222,
                3618,9139,6714,1289,8164,2827,1951,2765,8201,8185,583,9267,9353,5945,3046,5260,8540,
                6167,1333,939,7125,6878,2210,167,6554,3825,337,6830,9597,3792,6733,2054,1533,2315,9721,
                3866,4429,7543,1392,6025,8557,2330,3069,2473,5489,9182,8326,6087,3024,7582,8052,3111,
                3825,2627,4596,3570,5634,7080,428,3940,1617,6584,3448,204,7335,1777,567,5088,63,9172,
                8881,6033,9249,8678,6938,5177,3594,529,5476,9120,8177,3049,1844,2195,3028,6668,1133,
                3428,202,2373,5481,4266,3464,66666, 290,4559,1453,3396,5372,4312,5631,1146,6950,
                3827,5532,8460,6945,9120,9441,7048,5847,2503,723,9113,5080,1168,5001,2335,5006,3092,
                9028,1861,1246,9801,2362,701,9445,4383,8227,1801,5333,6376,6996,6835,4737,5763,2728,
                8458,8403,7208,1605,3214,5510,5926,841,9488,701,6309,8139,6710,4182,1466,5495,3550,5624,
                1079,1402,2523,4441,9559,2457,9216,6351,6211,9838,1898,2143,6571,9291,7837,9586,5222,
                3618,9139,6714,1289,8164,2827,1951,2765,8201,8185,583,9267,9353,5945,3046,5260,8540,
                6167,1333,939,7125,6878,2210,167,6554,3825,}), 78865878);
    }
    @Test
    void maxArea_negativeTest() {
        Assertions.assertEquals(MaxArea.maxArea(new int[]{}), 0);
        Assertions.assertEquals(MaxArea.maxArea(new int[]{111}), 0);
    }
}